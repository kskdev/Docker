#!/bin/bash

# osmksk05 専用のDockerfile Generator
# 何故専用なのかはneovimのプラグインが自分用のだから
# ---コマンドの意味(忘れやすいため) ---
# echo -n "hoge"   ：hogeを表示した後改行しない
# echo -e "\nhoge" ：\nを改行コードとして認識する

set -e

echo '============================================================'
echo 'Dockerfile Generator'
echo '============================================================'


echo -e '\n\n--- Select base image ---'
echo -n 'CUDA ver (e.g. 9.0 / 10.0): ' && read CUDA
echo -n 'CuDNN ver (e.g. 6 / 7): ' && read CUDNN
echo -n 'Ubuntu ver (e.g. 16.04 / 18.04): ' && read UBUNTU

echo -e '\n\n--- Select Conda Environment ---'
echo -n 'Python ver (2 or 3): ' && read CONDA_PY_VER
# echo -n 'Conda Distribution (Anaconda or Miniconda): ' && read CONDA_DIS
# while ! [ $(echo ${CONDA_DIS} | grep -E '^(Anaconda|Miniconda)$') ]
# do
#     echo -n 'please input again : ' && read CONDA_DIS
# done
CONDA_DIS='Anaconda'

# echo 'Ref : https://repo.continuum.io/{archive|miniconda}/ (e.g. 5.3.1 , 4.5.1)'
echo 'Ref : https://repo.continuum.io/{archive|miniconda}/ (e.g. 5.3.1)'
echo -n 'Conda ver : ' && read CONDA_VER
while ! [ $(echo ${CONDA_VER} | grep -E '^([0-9]*\.[0-9]*\.[0-9]*)$') ]
do
    echo -n 'please input again : ' && read CONDA_VER
done

if [ ${CONDA_DIS} = 'Anaconda' ]; then
CONDA_URL=https://repo.continuum.io/archive/${CONDA_DIS}${CONDA_PY_VER}-${CONDA_VER}-Linux-x86_64.sh
else
CONDA_URL=https://repo.continuum.io/miniconda/${CONDA_DIS}${CONDA_PY_VER}-${CONDA_VER}-Linux-x86_64.sh
fi



echo ''
echo '--- Select Deep Learning Library ---'

echo -n 'Do you use Pytorch? [y/n]: ' && read USE_PYTORCH
if [ ${USE_PYTORCH} = 'y' ]; then
    echo -n 'pytorch ver (0.4.1 or 1.0.0): ' && read PYTORCH
    while ! [ $(echo ${PYTORCH} | grep -E '^(0\.4\.[01]|1\.0\.[01])$') ]
    do
        echo -n 'please input again : ' && read PYTORCH
    done

    echo -n 'torchvision ver (0.2.0 or 0.2.1): ' && read TORCHVISION
    while ! [ $(echo ${TORCHVISION} | grep -E '^0\.2\.(0|1)$') ]
    do
        echo -n 'please input again : ' && read TORCHVISION
    done
    CUDATOOLKIT=${CUDA}
else
    :
fi

echo ''
echo -n 'Do you use Chainer? [y/n]: ' && read USE_CHAINER
if [ ${USE_CHAINER} = 'y' ]; then
    echo -n 'chainer ver : ' && read CHAINER
    while ! [ $(echo ${CHAINER} | grep -E '^([0-9]*\.[0-9]*\.[0-9]*)$') ]
    do
        echo -n 'please input again : ' && read CHAINER
    done
    CUPY=cupy-cuda${CUDA/./}
else
    :
fi



echo \
"# *****************************************************
# This Dockerfile was generated by 'make_Dockerfile.sh'.
# Image Build:
#   docker build ./ --force-rm=true --no-cache=true --rm=true --tag=repo:tag
# Run Container:
#   docker run --runtime=nvidia --rm -it -v /HostDIR:/root/work --name containerName repo:tag
# *****************************************************

# =========================================
# Set Versions
# =========================================
FROM nvidia/cuda:${CUDA}-cudnn${CUDNN}-devel-ubuntu${UBUNTU}

# Work Directory location:
ENV WORK_DIR=/root
WORKDIR \$WORK_DIR

# Copy jupyter setup file (run this file in container)
ADD ./set_jupyter_lab.sh ${WORK_DIR}

# Port forward (6006:TensorboardX, 8888:Jupyter):
EXPOSE 6006 8888


# =========================================
# Install commands
# =========================================
RUN apt-get update && \\
apt-get install -y --no-install-recommends \\
build-essential \\
cmake \\
git \\
curl \\
libjpeg-dev \\
libpng-dev \\
libgtk2.0-dev \\
software-properties-common \\
&& \\
rm -rf /var/lib/apt/lists/* && \\" > 'Dockerfile'



echo \
"# =========================================
# Install neovim with Plugins for kskdev
# =========================================
add-apt-repository ppa:neovim-ppa/unstable && \\
apt-get update && \\
apt-get install neovim && \\
# Install neovim with my plugins (for neovim) 
git clone https://github.com/kskdev/vim && \\
mkdir -p \$WORK_DIR/.config/nvim && \\
cp vim/dein.toml \$WORK_DIR/.config/nvim/ && \\
cp vim/vimrc \$WORK_DIR/.config/nvim/init.vim && \\
rm -rf vim" >> 'Dockerfile'



echo \
"# =========================================
# Install Conda
# =========================================
ENV PATH=\${WORK_DIR}/Conda/bin:\${PATH}
RUN curl --silent -O ${CONDA_URL} && \\
bash ${CONDA_DIS}${CONDA_PY_VER}-${CONDA_VER}-Linux-x86_64.sh -b -p \${WORK_DIR}/Conda && \\
rm \${WORK_DIR}/${CONDA_DIS}${CONDA_PY_VER}-${CONDA_VER}-Linux-x86_64.sh && \\" >> 'Dockerfile'



if [ ${CONDA_DIS} = 'Miniconda' ]; then
echo \
"# =========================================
# Install Python Library
# =========================================
conda install -c menpo opencv3 && \\
conda install -c conda-forge \\
numpy \\
matplotlib \\
pillow \\
&& \\" >> 'Dockerfile'
elif [ ${CONDA_DIS} = 'Anaconda' ]; then
echo \
"# =========================================
# Install Python Library
# =========================================
conda install -c menpo opencv3 \\
&& \\" >> 'Dockerfile'
else
    :
fi



if [ ${USE_PYTORCH} = 'y' ]; then
echo \
"# =========================================
# Install Pytorch 
# =========================================
conda install -c pytorch \\
pytorch=${PYTORCH} \\
torchvision=${TORCHVISION} \\
cudatoolkit=${CUDATOOLKIT} \\
&& \\" >> 'Dockerfile'
else
    :
fi



if [ ${USE_CHAINER} = 'y' ]; then
echo \
"# =========================================
# Install Chainer
# =========================================
pip install \\
chainer==${CHAINER} \\
${CUPY} \\
&& \\" >> 'Dockerfile'
else
    :
fi



echo \
"# =========================================
# Additional Library (for visualization) 
# =========================================
pip install \\
tensorflow \\
tensorboardX==1.5 \\
&& \\" >> 'Dockerfile'


echo \
"# =========================================
# Add Alias Commands
# =========================================
/bin/bash && \\
apt-get clean && \\
apt-get autoremove && \\
echo \"set completion-ignore-case on\" > \$WORK_DIR/.inputrc && \\
echo \"alias c='clear'\" >> \$WORK_DIR/.bashrc && \\
echo \"alias use='du -d 1 -h'\" >>\$WORK_DIR/.bashrc && \\
echo \"alias vi='vim'\" >> \$WORK_DIR/.bashrc" >> 'Dockerfile'



echo ''
echo 'Created Dockerfile!!'
echo 'Check Dockerfile!'
